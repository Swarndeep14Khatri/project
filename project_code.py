# -*- coding: utf-8 -*-
"""Project_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mcEkp03ZZB5ggNi3M40m-vYZWxBLQv-3
"""

import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.ensemble import HistGradientBoostingRegressor
from sklearn.metrics import mean_absolute_error
import joblib
from flask import Flask, request, jsonify

# ✅ Load Fully Cleaned Dataset
file_path = "final_cleaned_f1_data_fixed.csv"
f1_data = pd.read_csv(file_path)

# ✅ Ensure all required columns are present
required_columns = {"LapNumber", "LapTime", "TyreAge", "TrackTemperature", "Speed"}
missing_columns = required_columns - set(f1_data.columns)
if missing_columns:
    raise ValueError(f"Missing columns in dataset: {missing_columns}")

# ✅ Check if dataset is empty after cleaning
if f1_data.empty:
    raise ValueError("Dataset is empty after preprocessing. Please check the input data.")

# ✅ Select Features & Target
features = ["LapNumber", "TyreAge", "TrackTemperature", "Speed"]
target = "LapTime"
X = f1_data[features]
y = f1_data[target]

# ✅ Train-Test Split (Ensure enough samples exist)
if len(X) < 2:
    raise ValueError("Not enough data to split into train and test sets. Check dataset size.")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ✅ Train Model
model = HistGradientBoostingRegressor(max_iter=100, random_state=42)
model.fit(X_train, y_train)

# ✅ Evaluate Model
y_pred = model.predict(X_test)
print(f"✅ Model Trained Successfully! MAE: {mean_absolute_error(y_test, y_pred):.3f}")

# ✅ Save Model
joblib.dump(model, "f1_model.pkl")

# ✅ Flask API Setup
app = Flask(__name__)
model = joblib.load("f1_model.pkl")

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        features = np.array(data['features']).reshape(1, -1)
        prediction = model.predict(features)[0]
        return jsonify({'predicted_lap_time': round(prediction, 2)})
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=5000)

print("✅ Project is ready for deployment!")